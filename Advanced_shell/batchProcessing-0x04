#!/bin/bash

# API Base URL
API_URL="https://pokeapi.co/api/v2/pokemon"

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Log file for errors
ERROR_LOG="errors.txt"

# Function to fetch Pokémon data
fetch_pokemon() {
    local pokemon_name=$1
    local output_file="${pokemon_name}.json"
    local retries=3
    local attempt=0
    local success=0

    while [[ $attempt -lt $retries ]]; do
        ((attempt++))
        echo "Fetching data for $pokemon_name (Attempt $attempt)..."

        # Make API request
        response=$(curl -s -w "%{http_code}" -o "$output_file" "$API_URL/$pokemon_name")

        # Extract HTTP status code
        http_status=${response: -3}

        if [[ $http_status -eq 200 ]]; then
            echo "Successfully fetched data for $pokemon_name."
            success=1
            break
        else
            echo "Error fetching $pokemon_name (Status: $http_status). Retrying..."
            sleep 2  # Wait before retrying
        fi
    done

    if [[ $success -eq 0 ]]; then
        echo "Failed to fetch $pokemon_name after $retries attempts." >> "$ERROR_LOG"
        rm -f "$output_file"  # Remove incomplete file
    fi
}

# Loop through the Pokémon list in parallel, managing background jobs
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &  # Run each fetch in background
    jobs+=($!)  # Save the process ID of the background job
done

# Wait for all background processes to complete
for job in "${jobs[@]}"; do
    wait $job  # Wait for each background process to finish
    if [[ $? -ne 0 ]]; then
        echo "Process $job failed. Killing all processes..." >> "$ERROR_LOG"
        kill $job  # Kill the background job if it fails
    fi
done

echo "All Pokémon data retrieval tasks completed!"
